{"/home/travis/build/npmtest/node-npmtest-pigato/test.js":"/* istanbul instrument in package npmtest_pigato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pigato/lib.npmtest_pigato.js":"/* istanbul instrument in package npmtest_pigato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pigato = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pigato = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pigato/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pigato && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pigato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pigato\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pigato.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pigato.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pigato.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pigato.__dirname + '/lib.npmtest_pigato.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/index.js":"module.exports.Broker = require('./lib/Broker');\nmodule.exports.Worker = require('./lib/Worker');\nmodule.exports.Client = require('./lib/Client');\nmodule.exports.services = {\n  Directory: require('./services/Directory')\n};\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/Broker.js":"'use strict';\n\nrequire('es6-shim');\n\nvar util = require('util');\nvar debug = require('debug')('pigato:Broker');\nvar uuid = require('node-uuid');\nvar events = require('events');\nvar zmq = require('zmq');\nvar async = require('async');\nvar _ = require('lodash');\nvar semver = require('semver');\nvar MDP = require('./mdp');\nvar putils = require('./utils');\n\nvar BaseController = require('./BrokerController');\n\nvar HEARTBEAT_LIVENESS = 3;\n\nfunction Broker(endpoint, conf) {\n  this.services = {};\n  this.workers = new Map();\n  this.rmap = new Map();\n\n  this.conf = {\n    heartbeat: 2500,\n    dmode: 'load',\n    name: 'B' + uuid.v4(),\n    intch: 'tcp://127.0.0.1:55550'\n  };\n\n  _.extend(this.conf, conf);\n\n  this.endpoint = endpoint;\n\n  if (this.conf.ctrl) {\n    this.ctrl = this.conf.ctrl;\n  } else {\n    this.ctrl = new BaseController();\n  }\n\n  events.EventEmitter.call(this);\n}\nutil.inherits(Broker, events.EventEmitter);\n\nBroker.prototype.start = function() {\n  this.socket = zmq.socket('router');\n  this.socket.identity = this.conf.name;\n  this.socket.setsockopt('linger', 1);\n\n  this.pub = zmq.socket('pub');\n  this.pub.identity = this.conf.name + '/pub';\n\n  var self = this;\n\n  this.socket.on('message', function() {\n    var args = putils.args(arguments);\n    self.onMsg.call(self, args);\n  });\n\n  this.hbTimer = setInterval(function() {\n    self.workersCheck();\n  }, this.conf.heartbeat);\n\n  this.srvTimer = setInterval(function() {\n    var supd = false;\n\n    _.each(self.services, function(service, srvName) {\n      if (!service.workers.size) {\n        supd = true;\n        delete self.services[srvName];\n      }\n    });\n\n    if (supd) {\n      self.servicesUpdate();\n    }\n\n    self.rmap.forEach(function(req) {\n      var vld = self.requestValidate(req);\n      if (!vld) {\n        self.requestDelete(req);\n      }\n    });\n  }, 60000);\n\n  var queue = [];\n\n  queue.push(function(next) {\n    self.socket.bind(self.endpoint, function() {\n      next();\n    });\n  });\n\n  queue.push(function(next) {\n    self.pub.bind(self.conf.intch, function() {\n      next();\n    });\n  });\n\n  queue.push(function(next) {\n    self.ctrl.rgetall(function(err, reqs) {\n      _.each(reqs, function(req) {\n        self.requestProcess(req);\n      });\n      next();\n    });\n  });\n\n  async.series(queue, function() {\n    debug('B: broker started on %s', self.endpoint);\n    setImmediate(self.onStart.bind(self));\n  });\n};\n\nBroker.prototype.stop = function() {\n  var self = this;\n\n  clearInterval(this.hbTimer);\n  clearInterval(this.srvTimer);\n\n  var queue = [];\n\n  queue.push(function(next) {\n    setTimeout(function() {\n      next();\n    }, 100);\n  });\n\n  if (self.socket) {\n    queue.push(function(next) {\n      self.socket.unbind(self.endpoint, function() {\n        self.socket.close();\n        delete self.socket;\n        next();\n      });\n    });\n  }\n\n  if (self.pub) {\n    queue.push(function(next) {\n      self.pub.unbind(self.conf.intch, function() {\n        self.pub.close();\n        delete self.pub;\n        next();\n      });\n    });\n  }\n\n  async.series(queue, function() {\n    delete self.socket;\n    delete self.pub;\n\n    setImmediate(self.onStop.bind(self));\n  });\n};\n\nBroker.prototype.onStart = function() {\n  if (this.conf.onStart) {\n    this.conf.onStart();\n  }\n  this.emit('start');\n};\n\nBroker.prototype.onStop = function() {\n  if (this.conf.onStop) {\n    this.conf.onStop();\n  }\n  this.emit('stop');\n};\n\nBroker.prototype.send = function(msg) {\n  if (!this.socket) {\n    return;\n  }\n\n  this.socket.send(msg);\n};\n\nBroker.prototype.onMsg = function(_msg) {\n  var msg = putils.mparse(_msg);\n\n  var header = msg[1];\n\n  if (header == MDP.CLIENT) {\n    this.onClient(msg);\n  } else if (header == MDP.WORKER) {\n    this.onWorker(msg);\n  } else {\n    this.emitErr('ERR_MSG_HEADER');\n  }\n\n  this.workersCheck();\n};\n\nBroker.prototype.emitErr = function(msg) {\n  this.emit.apply(this, ['error', msg]);\n};\n\nBroker.prototype.onClient = function(msg) {\n  var clientId = msg[0];\n  var type = msg[2];\n\n  var req;\n  var rid;\n  if (type == MDP.W_REQUEST) {\n    var srvName = msg[3] || 'UNK';\n    rid = msg[4];\n    debug('B: REQUEST from clientId: %s, service: %s', clientId, srvName);\n\n    var opts = msg[6];\n\n    try {\n      opts = JSON.parse(opts);\n    } catch (e) {\n      // Ignore\n    }\n    if (!_.isObject(opts)) {\n      opts = {};\n    }\n\n    req = {\n      service: srvName,\n      clientId: clientId,\n      attempts: 0,\n      rid: rid,\n      timeout: opts.timeout || 60000,\n      ts: (new Date()).getTime(),\n      rejects: new Map(),\n      msg: msg,\n      opts: opts\n    };\n\n    this.requestProcess(req);\n  } else if (type == MDP.W_HEARTBEAT) {\n    if (msg.length === 5) {\n      var type = msg[3];\n      if (type === 'req') {\n        rid = req[4];\n        req = this.rmap.get(rid);\n        if (req && req.workerId) {\n          this.send([req.workerId, MDP.WORKER, MDP.W_HEARTBEAT, clientId, '', rid]);\n        }\n      } else if (type === 'worker') {\n        var worker = this.workers.get(msg[4]);\n        if (worker) {\n          worker.liveness = HEARTBEAT_LIVENESS;\n        }\n      }\n    } else {\n      this.send([clientId, MDP.CLIENT, MDP.W_HEARTBEAT]);\n    }\n  }\n};\n\nBroker.prototype.onWorker = function(msg) {\n  var workerId = msg[0];\n  var type = msg[2];\n\n  var wready = this.workers.has(workerId);\n  var worker = this.workerRequire(workerId);\n\n  var opts;\n\n\n  if (type == MDP.W_READY) {\n    var srvName = msg[3];\n\n    debug('B: register worker: %s, service: %s', workerId, srvName, wready ? 'R' : '');\n\n    if (!srvName) {\n      this.workerDelete(workerId, true);\n\n    } else if (!wready) {\n      this.serviceRequire(srvName);\n      this.serviceWorkerAdd(srvName, workerId);\n\n      this.send([workerId, MDP.WORKER, MDP.W_READY]);\n    }\n    return;\n  }\n\n  if (!wready) {\n    this.workerDelete(workerId, true);\n    return;\n  }\n\n  worker.liveness = HEARTBEAT_LIVENESS;\n\n  if (type == MDP.W_REPLY || type == MDP.W_REPLY_PARTIAL || type == MDP.W_REPLY_REJECT) {\n    var rid = msg[5];\n\n    if (!worker.rids.has(rid)) {\n      debug('B: FATAL from worker \\'%s\\' (%s), rid not found mismatch \\'%s\\'', workerId, worker.service, rid);\n      this.workerDelete(workerId, true);\n      return;\n    }\n\n    var req = this.rmap.get(rid);\n    if (!req) {\n      debug('B: FATAL from worker \\'%s\\' (%s), req not found', workerId, worker.service, rid);\n      this.workerDelete(workerId, true);\n      return;\n    }\n\n    var service = this.serviceRequire(req.service);\n\n    if (type == MDP.W_REPLY_REJECT) {\n      debug('B: REJECT from worker \\'%s\\' (%s) for req \\'%s\\'', workerId, worker.service, rid);\n\n      req.rejects.set(workerId, 1);\n      delete req.workerId;\n      worker.rids.delete(rid);\n\n      service.q.push(req.rid);\n      this.dispatch(req.service);\n\n    } else if (type == MDP.W_REPLY || type == MDP.W_REPLY_PARTIAL) {\n      debug('B: REPLY from worker \\'%s\\' (%s)', workerId, worker.service);\n\n      opts = msg[8];\n      try {\n        opts = JSON.parse(opts);\n      } catch (e) {\n        // Ignore\n      }\n      if (!_.isObject(opts)) {\n        opts = {};\n      }\n\n      var obj = msg.slice(6);\n\n      this.reply(type, req, obj);\n\n      if (type == MDP.W_REPLY) {\n        worker.rids.delete(rid);\n        this.requestDelete(req);\n        this.dispatch(req.service);\n        if (req.service !== worker.service) {\n          this.dispatch(worker.service);\n        }\n      }\n    }\n\n  } else if (type == MDP.W_HEARTBEAT) {\n    opts = msg[4];\n    try {\n      opts = JSON.parse(opts);\n    } catch (e) {\n      opts = {};\n    }\n\n    _.each(['concurrency'], function(fld) {\n      if (!_.isUndefined(opts[fld])) {\n        worker.opts[fld] = opts[fld];\n      }\n    });\n\n    worker.liveness++;\n    this.send([workerId, MDP.WORKER, MDP.W_HEARTBEAT]);\n\n    if (worker.service) {\n      if (worker.service.indexOf('$') === 0 && opts.update) {\n        this.notify(worker.service);\n      }\n    }\n\n  } else if (type == MDP.W_DISCONNECT) {\n    this.workerDelete(workerId, true);\n  }\n};\n\nBroker.prototype.reply = function(type, req, msg) {\n  this.send([req.clientId, MDP.CLIENT, type, '', req.rid].concat(msg));\n};\n\nBroker.prototype.requestProcess = function(req) {\n  var service = this.serviceRequire(req.service);\n\n  this.rmap.set(req.rid, req);\n  if (req.opts.persist) {\n    this.ctrl.rset(req);\n  }\n\n  service.q.push(req.rid);\n  this.dispatch(req.service);\n};\n\nBroker.prototype.requestDelete = function(req) {\n  if (!req) {\n    return;\n  }\n\n  this.rmap.delete(req.rid);\n  if (req.opts.persist) {\n    this.ctrl.rdel(req);\n  }\n};\n\nBroker.prototype.requestValidate = function(req) {\n  if (!req) {\n    return false;\n  }\n\n  if (req.timeout > -1 && ((new Date()).getTime() > req.ts + req.timeout)) {\n    return false;\n  }\n\n  return true;\n};\n\nBroker.prototype.workerRequire = function(workerId) {\n  if (this.workers.has(workerId)) {\n    return this.workers.get(workerId);\n  }\n\n  var worker = {\n    workerId: workerId,\n    liveness: HEARTBEAT_LIVENESS,\n    rids: new Map(),\n    opts: {\n      concurrency: 100\n    },\n    rcnt: 0\n  };\n\n  this.workers.set(workerId, worker);\n\n  return worker;\n};\n\nBroker.prototype.workerDelete = function(workerId, disconnect) {\n  var self = this;\n  \n  var worker = this.workers.get(workerId);\n\n  if (!worker) {\n    this.workers.delete(workerId);\n    return;\n  }\n\n  debug('B: Worker delete \\'%s\\' (%s)', workerId, disconnect);\n\n  if (disconnect) {\n    this.send([workerId, MDP.WORKER, MDP.W_DISCONNECT]);\n  }\n\n  var service = null;\n  var dservices = [];\n  if (worker.service) {\n    service = this.serviceRequire(worker.service);\n    service.workers.delete(workerId);\n    dservices.push(worker.service);\n  }\n\n  this.workers.delete(workerId);\n\n  worker.rids.forEach(function(__, rid) {\n    var req = self.rmap.get(rid);\n    \n    if (!req) {\n      return;\n    }\n\n    delete req.workerId;\n\n    var crd = true;\n\n    if (worker.service) {\n      if (req.opts.retry) {\n        service.q.push(req.rid);\n        crd = false;\n      }\n    }\n\n    if (crd) {\n      self.requestDelete(req);\n    }\n\n    if (_.indexOf(dservices, req.service) === -1) {\n      dservices.push(req.service);\n    }\n  });\n\n  this.notify('$dir');\n\n  if (dservices.length) {\n    for (var s = 0; s < dservices.length; s++) {\n      this.dispatch(dservices[s]);\n    }\n  }\n};\n\nBroker.prototype.workersCheck = function() {\n  var self = this;\n\n  if (this._wcheck) {\n    if ((new Date()).getTime() - this._wcheck < this.conf.heartbeat) {\n      return;\n    }\n  }\n\n  this._wcheck = (new Date()).getTime();\n\n  this.workers.forEach(function(worker, workerId) {\n    if (!worker) {\n      self.workerDelete(workerId, true);\n      return;\n    }\n\n    worker.liveness--;\n\n    if (worker.liveness < 0) {\n      debug('B: Worker purge \\'%s\\'', workerId);\n      self.workerDelete(workerId, true);\n      return;\n    }\n\n    if (worker.liveness < HEARTBEAT_LIVENESS) {\n      self.send([workerId, MDP.WORKER, MDP.W_HEARTBEAT]);\n    }\n  });\n};\n\nBroker.prototype.workerAvailable = function(workerId) {\n  if (!workerId) {\n    return false;\n  }\n\n  var worker = this.workers.get(workerId);\n\n  if (!worker) {\n    return false;\n  }\n\n  if (worker.opts.concurrency === -1) {\n    return true;\n  }\n\n  if (worker.rids.size < worker.opts.concurrency) {\n    return true;\n  }\n\n  return false;\n};\n\nBroker.prototype.serviceRequire = function(srvName) {\n  if (this.services[srvName]) {\n    return this.services[srvName];\n  }\n\n  var service = {\n    name: srvName,\n    workers: new Map(),\n    q: [],\n    aux: []\n  };\n\n  this.services[srvName] = service;\n  this.servicesUpdate();\n  return service;\n};\n\nBroker.prototype.servicesUpdate = function() {\n  var self = this;\n\n  _.each(this.services, function(service, srvName) {\n    service.aux = [srvName];\n  });\n\n  _.each(this.services, function(service, srvName) {\n    if (srvName.indexOf('@') > 0 && !srvName.match(/@\\d+[.]\\d+[.]\\d+$/)) {\n      // find all satisfying services\n\n      var prefix = srvName.replace(/@([^@]+)$/, '@');\n      var range = srvName.replace(/(^.*@)([^@]+)$/, '$2');\n      var satisfying = _.filter(self.services, function(aService, aSrvName) {\n        if (aSrvName == srvName || aSrvName.indexOf(prefix) !== 0 || !aSrvName.match(/@\\d+[.]\\d+[.]\\d+$/)) {\n          return false;\n        }\n\n        var version = aSrvName.replace(/^.+@([^@]+)$/, '$1');\n        return semver.satisfies(version, range);\n      });\n\n      service.aux = _.pluck(satisfying, 'name');\n    }\n  });\n\n  _.each(this.services, function(service, srvName) {\n    if (!service.workers.size && srvName[srvName.length - 1] !== '*' && srvName.indexOf('@') === -1) {\n      // let's find the best matching widlcard services\n\n      var bestMatching = _.reduce(self.services, function(acc, aService, aSrvName) {\n\n        if (aSrvName == srvName || aSrvName[aSrvName.length - 1] !== '*' || srvName.indexOf(aSrvName.slice(0, -1)) !== 0) {\n          return acc;\n        }\n\n        return aSrvName.length > acc.length ? aSrvName : acc;\n      }, '');\n\n      if (bestMatching) {\n        service.aux.push(bestMatching);\n      }\n    }\n  });\n\n  _.each(this.services, function(service, srvName) {\n    service.aux = _.uniq(service.aux);\n    if (!service.aux.length) {\n      delete self.services[srvName];\n    }\n  });\n};\n\nBroker.prototype.serviceWorkerAdd = function(srvName, workerId) {\n  var service = this.serviceRequire(srvName);\n  var worker = this.workerRequire(workerId);\n\n  if (!worker) {\n    this.workerDelete(workerId, true);\n    return;\n  }\n\n  if (!service.workers.has(workerId)) {\n    worker.service = srvName;\n    service.workers.set(workerId, 1);\n  }\n\n  this.notify('$dir');\n  this.dispatch(srvName);\n};\n\nfunction _rhandle(srvName, workerIds) {\n  var self = this;\n\n  var service = this.serviceRequire(srvName);\n\n  var rid = service.q.shift();\n  if (!rid) {\n    return 0;\n  }\n\n  var req = this.rmap.get(rid);\n  if (!req) {\n    return 0;\n  }\n\n  var vld = this.requestValidate(req);\n\n  if (!vld) {\n    this.rmap.delete(req.rid);\n    if (req.opts.persist) {\n      this.ctrl.rdel(req);\n    }\n\n    return service.q.length;\n  }\n\n  req.attempts++;\n\n  var workerId = null;\n  var wcret = 0;\n\n  if (workerIds.length) {\n    if (req.opts.workerId) {\n      wcret = 1;\n      if (self.workerAvailable(req.opts.workerId)) {\n        workerId = req.opts.workerId;\n      }\n    } else {\n      for (var wi = 0; wi < workerIds.length; wi++) {\n        var _workerId = workerIds[wi];\n        if (self.workerAvailable(_workerId)) {\n          wcret++;\n          if (!req.rejects.has(workerId)) {\n            workerId = _workerId;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (!workerId) {\n    service.q.push(req.rid);\n    return wcret;\n  }\n\n  var worker = this.workerRequire(workerId);\n\n  req.workerId = worker.workerId;\n  worker.rids.set(req.rid, req);\n  worker.rcnt++;\n\n  if (req.opts.persist) {\n    this.ctrl.rset(req);\n  }\n\n  var obj = [\n    worker.workerId, MDP.WORKER, MDP.W_REQUEST,\n    req.clientId, req.service, ''\n  ].concat(req.msg.slice(4));\n\n  this.send(obj);\n\n  return 1;\n}\n\nBroker.prototype.dispatch = function(srvName) {\n  var self = this;\n  var service = this.serviceRequire(srvName);\n  var qlen = service.q.length;\n\n  if (!qlen) {\n    return;\n  }\n\n  var workerIds = [];\n  for (var s = 0; s < service.aux.length; s++) {\n    var aService = this.serviceRequire(service.aux[s]);\n    workerIds = workerIds.concat(Array.from(aService.workers.keys()));\n  }\n\n  if (this.conf.dmode === 'load' && workerIds.length > 1) {\n    workerIds.sort(function(a, b) {\n      var wa = self.workers.get(a);\n      var wb = self.workers.get(b);\n      var arn = wa.rids.size;\n      var brn = wb.length;\n\n      if (arn < brn) {\n        return -1;\n      } else if (brn < arn) {\n        return 1;\n      }\n\n      return wa.rcnt <= wb.rcnt ? -1 : 1;\n    });\n  } else if (this.conf.dmode === 'rand' && workerIds.length > 1) {\n    workerIds = putils.shuffle(workerIds);\n  }\n\n  for (var r = 0; r < qlen; r++) {\n    var ret = _rhandle.call(this, srvName, workerIds);\n    if (!ret) {\n      break;\n    }\n  }\n};\n\nBroker.prototype.notify = function(channel) {\n  switch (channel) {\n    case '$dir':\n      this.pub.send('$dir ' + JSON.stringify(\n        _.reduce(this.services, function(acc, service, srvName) {\n          acc[srvName] = Array.from(service.workers.keys());\n          return acc;\n        }, {})\n      ));\n      break;\n  }\n};\n\nmodule.exports = Broker;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/BrokerController.js":"'use strict';\n\nfunction BrokerController() {\n  this.__reqs = {};\n  this.__srq = {};\n\n  this.init();\n}\n\nBrokerController.prototype.init = function() {};\n\nBrokerController.prototype._srq = function(srv) {\n  if (this.__srq[srv]) {\n    return this.__srq[srv];\n  }\n\n  var srq = this.__srq[srv] = [];\n  return srq;\n};\n\nBrokerController.prototype.rset = function(req, callback) {\n  this.__reqs[req.rid] = req;\n\n  if (callback) {\n    callback();\n  }\n};\n\nBrokerController.prototype.rgetall = function(callback) {\n  var self = this;\n\n  setImmediate(function() {\n    callback(null, self.__reqs);\n  });\n};\n\nBrokerController.prototype.rget = function(rid, callback) {\n  var self = this;\n\n  setImmediate(function() {\n    callback(null, self.__reqs[rid]);\n  });\n};\n\nBrokerController.prototype.rdel = function(req) {\n  delete this.__reqs[req.rid];\n};\n\nmodule.exports = BrokerController;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/Client.js":"'use strict';\n\nrequire('es6-shim');\n\nvar zmq = require('zmq');\nvar Readable = require('readable-stream').Readable;\nvar debug = require('debug')('pigato:Client');\nvar uuid = require('node-uuid');\nvar util = require('util');\nvar events = require('events');\nvar _ = require('lodash');\nvar MDP = require('./mdp');\nvar putils = require('./utils');\n\nvar HEARTBEAT_LIVENESS = 3;\n\nfunction Client(broker, conf) {\n\n  this.broker = broker;\n\n  this.conf = {\n    autostart: false,\n    reconnect: 1000,\n    heartbeat: 2500,\n    timeout: 60000,\n    retry: 0,\n    prefix: 'C' + uuid.v4()\n  };\n\n  this.reqs = new Map();\n\n  _.extend(this.conf, conf);\n\n  events.EventEmitter.call(this);\n\n  if (this.conf.autostart) {\n    this.start();\n  }\n}\nutil.inherits(Client, events.EventEmitter);\n\nClient.prototype.onConnect = function() {\n  this.emit.apply(this, ['connect']);\n  if (this.conf.onConnect) {\n    this.conf.onConnect();\n  }\n  \n  debug('C: connected');\n};\n\nClient.prototype.onDisconnect = function() {\n  this.emit.apply(this, ['disconnect']);\n  if (this.conf.onDisconnect) {\n    this.conf.onDisconnect();\n  }\n\n  debug('C: disconnected');\n};\n\nClient.prototype.start = function() {\n  var self = this;\n\n  this.stop();\n\n  this._mcnt = 0;\n\n  this.socketId = this.conf.prefix + '-' + uuid.v4();\n  this.socket = zmq.socket('dealer');\n  this.socket.identity = new Buffer(this.socketId);\n  this.socket.setsockopt('linger', 1);\n\n  this.socket.on('message', function() {\n    self.onMsg.call(self, putils.args(arguments));\n  });\n\n  this.socket.on('error', function(err) {\n    self.emitErr(err);\n  });\n\n  this.socket.connect(this.broker);\n  this.liveness = HEARTBEAT_LIVENESS;\n  \n  debug('C: starting');\n\n  this.hbTimer = setInterval(function() {\n    self.heartbeat();\n    \n    self.reqs.forEach(function(req, rid) {\n      if (req.timeout > -1 && ((new Date()).getTime() > req.lts + req.timeout)) {\n        self.onMsg([\n          MDP.CLIENT, MDP.W_REPLY, '', new Buffer(rid), new Buffer('-1'),\n          new Buffer(JSON.stringify('C_TIMEOUT'))\n        ]);\n      }\n    });\n    \n    self.liveness--;\n\n    if (self.liveness <= 0) {\n      debug('C: liveness=0');\n      self.stop();\n      setTimeout(function() {\n        self.start();\n      }, self.conf.reconnect);\n    }\n\n  }, this.conf.heartbeat);\n \n  this.heartbeat(); \n  this.emit.apply(this, ['start']);\n};\n\nClient.prototype.stop = function() {\n  clearInterval(this.hbTimer);\n\n  if (this.socket) {\n    debug('C: stopping');\n    \n    var socket = this.socket;\n    delete this.socket;\n    delete this.socketId;\n    \n    if (socket._zmq.state != zmq.STATE_CLOSED) {\n      socket.close();\n    }\n\n    this.onDisconnect();\n    this.emit.apply(this, ['stop']);\n  }    \n};\n\nClient.prototype.send = function(msg) {\n  if (!this.socket) {\n    return;\n  }\n\n  this.socket.send(msg);\n};\n\nClient.prototype.onMsg = function(msg) {\n  msg = putils.mparse(msg);\n\n  var header = msg[0];\n  var type = msg[1];\n\n  this.liveness = HEARTBEAT_LIVENESS;\n\n  if (header != MDP.CLIENT) {\n    this.emitErr('ERR_MSG_HEADER');\n    return;\n  }\n\n  this._mcnt++;\n  \n  if (this._mcnt === 1) {\n    this.onConnect();\n  }\n\n  if (type == MDP.W_HEARTBEAT) {\n    debug('C: HEARTBEAT');\n    return;\n  }\n\n  if (msg.length < 3) {\n    this.emitErr('ERR_MSG_LENGTH');\n    return;\n  }\n\n  var rid = msg[3];\n\n  var req = this.reqs.get(rid);\n  if (!req) {\n    this.emitErr('ERR_REQ_INVALID');\n    return;\n  }\n\n  var err = +msg[4] || 0;\n  var data = msg[5] || null;\n\n  if (data) {\n    data = JSON.parse(data);\n  }\n\n  if (err === -1) {\n    err = data;\n    data = null;\n  }\n\n  if (type == MDP.W_REPLY || type == MDP.W_REPLY_PARTIAL) {\n    req.lts = new Date().getTime();\n\n    if (type == MDP.W_REPLY) {\n      req._finalMsg = [err, data];\n      req.ended = true;\n      this.reqs.delete(rid);\n    }\n\n    if (err) {\n      req.stream.emit('error', err);\n    }\n\n    req.stream.push(data);\n\n    if (type == MDP.W_REPLY) {\n      req.stream.push(null);\n    }\n  } else {\n    this.emitErr('ERR_MSG_TYPE');\n  }\n};\n\nClient.prototype.emitErr = function(msg) {\n  this.emit.apply(this, ['error', msg]);\n};\n\nfunction noop() {}\n\nfunction _request(serviceName, data, _opts) {\n  var self = this;\n  var rid = uuid.v4();\n  var opts = _.isObject(_opts) ? _opts : {};\n\n  _.each(['timeout', 'retry'], function(fld) {\n    opts[fld] = opts[fld] !== undefined ? opts[fld] : self.conf[fld];\n  });\n\n  var req = {\n    rid: rid,\n    timeout: opts.timeout,\n    ts: new Date().getTime(),\n    opts: opts,\n    heartbeat: function() {\n      self.heartbeat(rid);\n    },\n    _finalMsg: null,\n    ended: false\n  };\n\n  req.lts = req.ts;\n\n  this.reqs.set(rid, req);\n\n  var stream = new Readable({\n    objectMode: true\n  });\n\n  stream._read = noop;\n  stream.heartbeat = req.heartbeat;\n\n  req.stream = stream;\n\n  debug('C: send request', serviceName, rid);\n\n  this.send([\n    MDP.CLIENT, MDP.W_REQUEST, serviceName, rid,\n    JSON.stringify(data), JSON.stringify(opts)\n  ]);\n\n  return req;\n}\n\nClient.prototype.requestStream = function(serviceName, data, opts) {\n  return this.request(serviceName, data, opts);\n};\n\nClient.prototype.request = function() {\n  var mode = 'stream';\n  var serviceName = arguments[0];\n  var data = arguments[1];\n  var opts, partialCb, finalCb;\n\n  if (arguments.length >= 4) {\n    mode = 'callback';\n    partialCb = arguments[2];\n    finalCb = arguments[3];\n    opts = arguments[4];\n  } else {\n    opts = arguments[2];\n  }\n\n  var req = _request.call(this, serviceName, data, opts);\n\n  if (mode === 'callback') {\n    req.stream.on('data', function(data) {\n      if (req.ended) {\n        return;\n      }\n\n      if (partialCb) {\n        partialCb(null, data);\n      }\n    });\n\n    req.stream.on('end', function() {\n      var msg = req._finalMsg;\n\n      if (finalCb) {\n        finalCb(msg[0], msg[1]);\n      }\n    });\n\n    req.stream.on('error', noop);\n\n  } else {\n    return req.stream;\n  }\n};\n\nClient.prototype.heartbeat = function(rid) {\n  var msg = [MDP.CLIENT, MDP.W_HEARTBEAT];\n  if (rid) {\n    msg.push('request', rid);\n  }\n  this.send(msg);\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/MClient.js":"var zmq = require('zmq');\nvar debug = require('debug')('pigato:Client');\nvar uuid = require('node-uuid');\nvar util = require('util');\nvar events = require('events');\nvar _ = require('lodash');\nvar putils = require('./utils');\nvar Client = require('./Client');\n\nfunction MClient(broker, conf) {\n  this.broker = broker;\n\n  this.conf = {\n    autostart: false,\n    reconnect: 1000,\n    heartbeat: 2500,\n    timeout: 60000,\n    retry: 0,\n    prefix: 'C' + uuid.v4()\n  };\n\n  _.extend(this.conf, conf);\n\n  events.EventEmitter.call(this);\n\n  if (this.conf.autostart) {\n    this.start();\n  }\n}\nutil.inherits(Client, events.EventEmitter);\n\nClient.prototype.onConnect = function() {\n  this.emit.apply(this, ['connect']);\n  if (this.conf.onConnect) {\n    this.conf.onConnect();\n  }\n  \n  debug('C: connected');\n};\n\nClient.prototype.onDisconnect = function() {\n  this.emit.apply(this, ['disconnect']);\n  if (this.conf.onDisconnect) {\n    this.conf.onDisconnect();\n  }\n\n  debug('C: disconnected');\n};\n\nMClient.prototype.start = function() {\n  this.stop();\n\n  this._mcnt = 0;\n\n  this.socketId = this.conf.prefix + '-' + uuid.v4();\n  this.socket = zmq.socket('dealer');\n  this.socket.identity = new Buffer(this.socketId);\n  this.socket.setsockopt('linger', 1);\n\n  this.socket.on('message', function() {\n    self.onMsg.call(self, putils.args(arguments));\n  });\n\n  this.socket.on('error', function(err) {\n    self.emitErr(err);\n  });\n\n  this.socket.connect(this.broker);\n  this.liveness = HEARTBEAT_LIVENESS;\n  \n  debug('C: starting');\n\n  this.hbTimer = setInterval(function() {\n    self.heartbeat();\n\n    _.each(self.reqs, function(req, rid) {\n      if (req.timeout > -1 && ((new Date()).getTime() > req.lts + req.timeout)) {\n        self.onMsg([\n          MDP.CLIENT, MDP.W_REPLY, '', new Buffer(rid), new Buffer('-1'),\n          new Buffer(JSON.stringify('C_TIMEOUT'))\n        ]);\n      }\n    });\n    \n    self.liveness--;\n\n    if (self.liveness <= 0) {\n      debug('C: liveness=0');\n      self.stop();\n      setTimeout(function() {\n        self.start();\n      }, self.conf.reconnect);\n    }\n\n  }, this.conf.heartbeat);\n \n  this.heartbeat(); \n  this.emit.apply(this, ['start']);\n};\n\nClient.prototype.stop = function() {\n  clearInterval(this.hbTimer);\n\n  if (this.socket) {\n    debug('C: stopping');\n    \n    var socket = this.socket;\n    delete this.socket;\n    delete this.socketId;\n    \n    if (socket._zmq.state != zmq.STATE_CLOSED) {\n      socket.close();\n    }\n\n    this.onDisconnect();\n    this.emit.apply(this, ['stop']);\n  }    \n};\n\nClient.prototype.send = function(msg) {\n  if (!this.socket) {\n    return;\n  }\n\n  this.socket.send(msg);\n};\n\nClient.prototype.onMsg = function(msg) {\n  msg = putils.mparse(msg);\n\n  var header = msg[0];\n  var type = msg[1];\n\n  this.liveness = HEARTBEAT_LIVENESS;\n\n  if (header != MDP.CLIENT) {\n    this.emitErr('ERR_MSG_HEADER');\n    return;\n  }\n\n  this._mcnt++;\n  \n  if (this._mcnt === 1) {\n    this.onConnect();\n  }\n\n  if (type == MDP.W_HEARTBEAT) {\n    debug('C: HEARTBEAT');\n    return;\n  }\n\n  if (msg.length < 3) {\n    this.emitErr('ERR_MSG_LENGTH');\n    return;\n  }\n\n  var rid = msg[3];\n\n  var req = this.reqs[rid];\n  if (!req) {\n    this.emitErr('ERR_REQ_INVALID');\n    return;\n  }\n\n  var err = +msg[4] || 0;\n  var data = msg[5] || null;\n\n  if (data) {\n    data = JSON.parse(data);\n  }\n\n  if (err === -1) {\n    err = data;\n    data = null;\n  }\n\n  if (type == MDP.W_REPLY || type == MDP.W_REPLY_PARTIAL) {\n    req.lts = new Date().getTime();\n\n    if (type == MDP.W_REPLY) {\n      req._finalMsg = [err, data];\n      req.ended = true;\n      delete this.reqs[rid];\n    }\n\n    if (err) {\n      req.stream.emit('error', err);\n    }\n\n    req.stream.push(data);\n\n    if (type == MDP.W_REPLY) {\n      req.stream.push(null);\n    }\n  } else {\n    this.emitErr('ERR_MSG_TYPE');\n  }\n};\n\nClient.prototype.emitErr = function(msg) {\n  this.emit.apply(this, ['error', msg]);\n};\n\nfunction noop() {}\n\nfunction _request(serviceName, data, _opts) {\n  var self = this;\n  var rid = uuid.v4();\n  var opts = _.isObject(_opts) ? _opts : {};\n\n  _.each(['timeout', 'retry'], function(fld) {\n    opts[fld] = opts[fld] !== undefined ? opts[fld] : self.conf[fld];\n  });\n\n  var req = this.reqs[rid] = {\n    rid: rid,\n    timeout: opts.timeout,\n    ts: new Date().getTime(),\n    opts: opts,\n    heartbeat: function() {\n      self.heartbeat(rid);\n    },\n    _finalMsg: null,\n    ended: false\n  };\n\n  req.lts = req.ts;\n\n  var stream = new Readable({\n    objectMode: true\n  });\n\n  stream._read = noop;\n  stream.heartbeat = req.heartbeat;\n\n  req.stream = stream;\n\n  debug('C: send request', serviceName, rid);\n\n  this.send([\n    MDP.CLIENT, MDP.W_REQUEST, serviceName, rid,\n    JSON.stringify(data), JSON.stringify(opts)\n  ]);\n\n  return req;\n}\n\nClient.prototype.requestStream = function(serviceName, data, opts) {\n  return this.request(serviceName, data, opts);\n};\n\nClient.prototype.request = function() {\n  var mode = 'stream';\n  var serviceName = arguments[0];\n  var data = arguments[1];\n  var opts, partialCb, finalCb;\n\n  if (arguments.length >= 4) {\n    mode = 'callback';\n    partialCb = arguments[2];\n    finalCb = arguments[3];\n    opts = arguments[4];\n  } else {\n    opts = arguments[2];\n  }\n\n  var req = _request.call(this, serviceName, data, opts);\n\n  if (mode === 'callback') {\n    req.stream.on('data', function(data) {\n      if (req.ended) {\n        return;\n      }\n\n      if (partialCb) {\n        partialCb(null, data);\n      }\n    });\n\n    req.stream.on('end', function() {\n      var msg = req._finalMsg;\n\n      if (finalCb) {\n        finalCb(msg[0], msg[1]);\n      }\n    });\n\n    req.stream.on('error', noop);\n\n  } else {\n    return req.stream;\n  }\n};\n\nClient.prototype.heartbeat = function(rid) {\n  var msg = [MDP.CLIENT, MDP.W_HEARTBEAT];\n  if (rid) {\n    msg.push(rid);\n  }\n  this.send(msg);\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/mdp.js":"module.exports = {\n  WORKER: 'W',\n  CLIENT: 'C',\n\n  W_READY:      '1',\n  W_REQUEST:    '2',\n  W_REPLY:      '3',\n  W_HEARTBEAT:  '4',\n  W_DISCONNECT: '5',\n  W_REPLY_PARTIAL: '6',\n  W_REPLY_REJECT: '7'\n};\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/utils.js":"module.exports = {\n  mparse: function(_msg) {\n    var msg = [];\n    for (var i = 0; i < _msg.length; i++) {\n      if (_msg[i]) {\n        msg[i] = _msg[i].toString();\n      }\n    }\n    return msg;\n  },\n  args: function(_args) {\n    var args = [];\n    for (var i = 0; i < _args.length; i++) {\n      args.push(_args[i]);\n    }\n    return args;\n  },\n  shuffle: function(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex ;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/lib/Worker.js":"'use strict';\n\nrequire('es6-shim');\n\nvar zmq = require('zmq');\nvar Writable = require('readable-stream').Writable;\nvar debug = require('debug')('pigato:Worker');\nvar uuid = require('node-uuid');\nvar util = require('util');\nvar events = require('events');\nvar _ = require('lodash');\nvar MDP = require('./mdp');\nvar putils = require('./utils');\n\nvar HEARTBEAT_LIVENESS = 3;\n\nfunction Worker(broker, service, conf) {\n  this.broker = broker;\n  this.service = service;\n\n  this.conf = {\n    heartbeat: 2500,\n    reconnect: 1000,\n    concurrency: 100,\n    prefix: 'W' + uuid.v4()\n  };\n\n  _.extend(this.conf, conf);\n\n  this.reqs = new Map();\n\n  events.EventEmitter.call(this);\n}\nutil.inherits(Worker, events.EventEmitter);\n\nWorker.prototype.onConnect = function() {\n  this.emit.apply(this, ['connect']);\n  if (this.conf.onConnect) {\n    this.conf.onConnect();\n  }\n\n  debug('W(' + this.conf.prefix + ') connected to B(%s)', this.broker);\n};\n\nWorker.prototype.onDisconnect = function() {\n  this.emit.apply(this, ['disconnect']);\n  if (this.conf.onDisconnect) {\n    this.conf.onDisconnect();\n  }\n\n  debug('W(' + this.conf.prefix + ') disconnected from B(%s)', this.broker);\n};\n\nWorker.prototype.start = function() {\n  var self = this;\n\n  this.stop();\n\n  this._mcnt = 0;\n\n  this.socket = zmq.socket('dealer');\n\n  this.socketId = this.conf.prefix + '-' + uuid.v4();\n  this.socket.identity = new Buffer(this.socketId);\n  this.socket.setsockopt('linger', 1);\n\n  this.socket.on('message', function() {\n    self.onMsg.call(self, putils.args(arguments));\n  });\n\n  this.socket.on('error', function(err) {\n    self.emitErr(err);\n  });\n\n  this.socket.connect(this.broker);\n  this.liveness = HEARTBEAT_LIVENESS;\n\n  debug('Worker ' + this.conf.prefix + ' connected to %s', this.broker);\n\n  this.sendReady();\n\n  debug('W: starting');\n\n  this.hbTimer = setInterval(function() {\n    self.liveness--;\n\n    if (self.liveness <= 0) {\n      debug('W: liveness=0');\n      self.stop();\n      setTimeout(function() {\n        self.start();\n      }, self.conf.reconnect);\n      return;\n    }\n\n    self.heartbeat();\n\n    self.reqs.forEach(function(req) {\n      req.liveness--;\n    });\n  }, this.conf.heartbeat);\n\n  this.heartbeat();\n  this.emit.apply(this, ['start']);\n};\n\nWorker.prototype.stop = function() {\n  clearInterval(this.hbTimer);\n  \n  if (this.socket) {\n    debug('W: stopping');\n    \n    this.sendDisconnect();\n    \n    var socket = this.socket;\n    delete this.socket;\n    delete this.socketId;\n\n    setImmediate(function() {\n      if (socket._zmq.state != zmq.STATE_CLOSED) {\n        socket.close();\n      }\n    });\n\n    this.onDisconnect();\n    this.emit.apply(this, ['stop']);\n  }\n};\n\nWorker.prototype.send = function(msg) {\n  if (!this.socket) {\n    return;\n  }\n\n  this.socket.send(msg);\n};\n\n// process message from broker\nWorker.prototype.onMsg = function(msg) {\n  this._mcnt++;\n\n  if (this._mcnt === 1) {\n    this.onConnect();\n  }\n\n  msg = putils.mparse(msg);\n\n  var header = msg[0];\n  var type = msg[1];\n\n  if (header != MDP.WORKER) {\n    this.emitErr('ERR_MSG_HEADER');\n    // send error\n    return;\n  }\n\n  this.liveness = HEARTBEAT_LIVENESS;\n\n  var clientId;\n  var rid;\n  var service;\n\n  if (type == MDP.W_REQUEST) {\n    clientId = msg[2];\n    service = msg[3];\n    rid = msg[5];\n    debug('W: W_REQUEST:', clientId, rid);\n    this.onRequest(clientId, service, rid, msg[6], msg[7]);\n  } else if (type == MDP.W_HEARTBEAT) {\n    if (msg.length === 5) {\n      clientId = msg[2];\n      rid = msg[4];\n      if (rid && this.reqs.has(rid)) {\n        var req = this.reqs.get(rid);\n        req.liveness = HEARTBEAT_LIVENESS;\n      }\n    }\n  } else if (type == MDP.W_DISCONNECT) {\n    debug('W: W_DISCONNECT');\n    this.start();\n  } else if (type == MDP.W_READY) {\n    debug('W: W_READY');\n  } else {\n    this.emitErr('ERR_MSG_TYPE_INVALID');\n  }\n};\n\nWorker.prototype.emitReq = function(req, rep) {\n  this.emit.apply(this, ['request', req.data, rep, req.opts]);\n};\n\nWorker.prototype.emitErr = function(msg) {\n  this.emit.apply(this, ['error', msg]);\n};\n\nWorker.prototype.onRequest = function(clientId, service, rid, data, opts) {\n  var self = this;\n\n  var req = {\n    clientId: clientId,\n    rid: rid,\n    liveness: HEARTBEAT_LIVENESS,\n    service: service,\n    data: null,\n    opts: {} \n  };\n\n  try { req.data = JSON.parse(data); } catch(e) {\n    // Ignore\n  }\n  try { req.opts = JSON.parse(opts); } catch(e) {\n    // Ignore\n  }\n\n  this.reqs.set(rid, req);\n\n  var reply = new Writable({\n    objectMode: true\n  });\n\n  reply.ended = false;\n\n  var _write = reply.write;\n  reply.write = function(chunk, encoding, cb) {\n    return _write.call(reply, chunk, encoding, cb);\n  };\n\n  reply._write = function(chunk, encoding, cb) {\n    var rf = self.replyPartial;\n    if (this.ended) {\n      rf = self.replyFinal;\n    }\n    if (this.endNull) {\n      chunk = null;\n    }\n    rf.apply(self, [clientId, rid, chunk, reply.opts]);\n    cb(null);\n  };\n\n  reply.opts = {};\n\n  reply.active = function() {\n    return self.reqs.has(rid) && !req.ended && req.liveness > 0;\n  };\n\n  reply.heartbeat = function() {\n    self.heartbeat();\n  };\n\n  var _end = reply.end;\n\n  reply.end = function(chunk, encoding, cb) {\n    this.ended = true;\n\n    if (chunk === undefined || chunk === null) {\n      chunk = '';\n      this.endNull = true;\n    }\n\n    var ret = _end.apply(reply, [chunk, encoding, cb]);\n\n    self.dreq(rid);\n    return ret;\n  };\n\n  reply.reject = function(err) {\n    self.replyReject(clientId, rid, err);\n    self.dreq(rid);\n  };\n\n  reply.error = function(err) {\n    self.replyError(clientId, rid, err);\n    self.dreq(rid);\n  };\n\n  this.emitReq(req, reply);\n};\n\nWorker.prototype.dreq = function(rid) {\n  this.reqs.delete(rid);\n};\n\nWorker.prototype.sendReady = function() {\n  this.send([MDP.WORKER, MDP.W_READY, this.service]);\n};\n\nWorker.prototype.sendDisconnect = function() {\n  this.send([MDP.WORKER, MDP.W_DISCONNECT]);\n};\n\nWorker.prototype.heartbeat = function(opts) {\n  this.send([\n    MDP.WORKER, MDP.W_HEARTBEAT, '',\n    JSON.stringify(_.extend({}, opts, {\n      concurrency: this.conf.concurrency\n    }))\n  ]);\n};\n\nWorker.prototype.reply = function(type, clientId, rid, code, data, opts) {\n  this.send([MDP.WORKER, type, clientId, '', rid, code, JSON.stringify(data), JSON.stringify(opts)]);\n};\n\nWorker.prototype.replyPartial = function(clientId, rid, data, opts) {\n  this.reply(MDP.W_REPLY_PARTIAL, clientId, rid, 0, data, opts);\n};\n\nWorker.prototype.replyFinal = function(clientId, rid, data, opts) {\n  this.reply(MDP.W_REPLY, clientId, rid, 0, data, opts);\n};\n\nWorker.prototype.replyReject = function(clientId, rid, err) {\n  this.reply(MDP.W_REPLY_REJECT, clientId, rid, 0, err);\n};\n\nWorker.prototype.replyError = function(clientId, rid, err) {\n  this.reply(MDP.W_REPLY, clientId, rid, -1, err);\n};\n\nmodule.exports = Worker;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/services/Base.js":"var zmq = require('zmq');\nvar _ = require('lodash');\nvar Worker = require('./../index').Worker;\n\nfunction Base(endpoint, conf) {\n  this.endpoint = endpoint;\n  this.conf = _.extend({}, conf);\n}; \n\nBase.prototype.start = function() {\n  this.wrk = new Worker(this.endpoint, this.service);\n  this.wrk.start();\n\n  this.sub = zmq.socket('sub');\n  this.sub.identity = this.wrk.name + '/sub';\n\n  this.sub.connect(this.conf.intch);\n};\n\nBase.prototype.onStart = function() {\n  if (this.conf.onStart) {\n    this.conf.onStart();\n  }\n};\n\nBase.prototype.stop = function() {\n  if (this.wrk) {\n    this.wrk.stop();\n    delete this.wrk;\n  }\n\n  if (this.sub) {\n    this.sub.close();\n    delete this.sub;\n  }\n};\n\nBase.prototype.onStop = function() {\n  if (this.conf.onStop) {\n    this.conf.onStop();\n  }\n};\n\nmodule.exports = Base;\n","/home/travis/build/npmtest/node-npmtest-pigato/node_modules/pigato/services/Directory.js":"var zmq = require('zmq');\nvar _ = require('lodash');\nvar util = require('util');\nvar Base = require('./Base');\n\nfunction Directory(endpoint, conf) {\n  this.service = '$dir';\n  this._dir = {};\n\n  Base.call(this, endpoint, conf);\n}; \nutil.inherits(Directory, Base);\n\nDirectory.prototype.start = function() {\n  Base.prototype.start.call(this);\n\n  var self = this;\n\n  this.wrk.on('request', function(inp, rep) {\n    rep.end(inp ? (self._dir[inp] || []) : self._dir);\n  });\n\n  this.sub.on('message', function(data) {\n    data = data.toString();\n    if (data.indexOf(self.service) === 0) {\n      var msg = data.substr(5);\n      msg = JSON.parse(msg);\n      self._dir = msg;\n    } \n  });\n  \n  this.sub.subscribe(this.service);\n  this.onStart();\n\n  this.wrk.heartbeat({ update: 1 }, true);\n};\n\nDirectory.prototype.stop = function() {\n  if (this.sub) {\n    this.sub.unsubscribe(this.service);\n  }\n\n  Base.prototype.stop.call(this);\n  this.onStop();\n};\n\nmodule.exports = Directory;\n"}